import { pgTable, text, timestamp, uuid, jsonb, integer, boolean } from 'drizzle-orm/pg-core';
import { relations } from 'drizzle-orm';
import { createInsertSchema, createSelectSchema } from 'drizzle-zod';
import { users } from './users';

// Posts table
export const posts = pgTable('posts', {
	id: uuid('id').primaryKey().defaultRandom(),
	userId: uuid('user_id')
		.references(() => users.id, { onDelete: 'cascade' })
		.notNull(),
	title: text('title').notNull(),
	content: text('content').notNull(),
	contentType: text('content_type').default('text'), // text, image, video, link
	mediaUrls: jsonb('media_urls').default([]), // Array of media URLs
	tags: jsonb('tags').default([]), // Array of tags
	createdAt: timestamp('created_at').defaultNow().notNull(),
	updatedAt: timestamp('updated_at').defaultNow().notNull(),
	isNsfw: boolean('is_nsfw').default(false),
	isDeleted: boolean('is_deleted').default(false),
	factionId: uuid('faction_id'),
	aiGeneratedTags: jsonb('ai_generated_tags').default([]), // Tags generated by AI
	bookmarkCount: integer('bookmark_count').default(0),
	viewCount: integer('view_count').default(0)
});

// Bookmarks (Top Shelf)
export const bookmarks = pgTable('bookmarks', {
	id: uuid('id').primaryKey().defaultRandom(),
	userId: uuid('user_id')
		.references(() => users.id, { onDelete: 'cascade' })
		.notNull(),
	postId: uuid('post_id')
		.references(() => posts.id, { onDelete: 'cascade' })
		.notNull(),
	createdAt: timestamp('created_at').defaultNow().notNull(),
	notes: text('notes'),
	customTags: jsonb('custom_tags').default([]), // Manual tags
	aiTags: jsonb('ai_tags').default([]), // AI-suggested tags
	colorCode: text('color_code'),
	emojiReaction: text('emoji_reaction'),
	svgOverlay: text('svg_overlay'), // SVG customizations
	folderPath: text('folder_path'), // For organizing bookmarks
	isPrivate: boolean('is_private').default(true)
});

// Shelves (Dynamic Feeds)
export const shelves = pgTable('shelves', {
	id: uuid('id').primaryKey().defaultRandom(),
	userId: uuid('user_id')
		.references(() => users.id, { onDelete: 'cascade' })
		.notNull(),
	name: text('name').notNull(), // AI-generated or user-defined
	description: text('description'),
	isMain: boolean('is_main').default(false), // Whether this is the Main Shelf
	createdAt: timestamp('created_at').defaultNow().notNull(),
	updatedAt: timestamp('updated_at').defaultNow().notNull(),
	// Customization
	theme: jsonb('theme').default({}),
	layout: jsonb('layout').default({}),
	// AI naming history
	nameHistory: jsonb('name_history').default([]),
	lastNameSuggestion: timestamp('last_name_suggestion'),
	pendingNameSuggestion: text('pending_name_suggestion'),
	// Visibility
	isPublic: boolean('is_public').default(false)
});

// Shelf items - posts in a shelf
export const shelfItems = pgTable('shelf_items', {
	id: uuid('id').primaryKey().defaultRandom(),
	shelfId: uuid('shelf_id')
		.references(() => shelves.id, { onDelete: 'cascade' })
		.notNull(),
	postId: uuid('post_id')
		.references(() => posts.id, { onDelete: 'cascade' })
		.notNull(),
	addedAt: timestamp('added_at').defaultNow().notNull(),
	sortOrder: integer('sort_order'),
	// Can be from algorithmic selection or user choice
	selectionType: text('selection_type').default('algorithm'), // algorithm, manual, recommendation
	// Weight of the item in the shelf based on relevance
	relevanceScore: integer('relevance_score')
});

// Comments on posts
// This will always work but uses 'any'
export const comments = pgTable('comments', {
	id: uuid('id').primaryKey().defaultRandom(),
	postId: uuid('post_id')
		.references(() => posts.id, { onDelete: 'cascade' })
		.notNull(),
	userId: uuid('user_id')
		.references(() => users.id, { onDelete: 'cascade' })
		.notNull(),
	content: text('content').notNull(),
	createdAt: timestamp('created_at').defaultNow().notNull(),
	updatedAt: timestamp('updated_at').defaultNow().notNull(),
	parentId: uuid('parent_id').references((): any => comments.id),
	isDeleted: boolean('is_deleted').default(false)
});

// Content reactions (likes, etc.)
export const reactions = pgTable('reactions', {
	id: uuid('id').primaryKey().defaultRandom(),
	userId: uuid('user_id')
		.references(() => users.id, { onDelete: 'cascade' })
		.notNull(),
	contentId: uuid('content_id').notNull(), // Can be post or comment ID
	contentType: text('content_type').notNull(), // 'post' or 'comment'
	reactionType: text('reaction_type').notNull(), // 'like', 'love', 'laugh', etc.
	createdAt: timestamp('created_at').defaultNow().notNull()
});

// Relations
export const postsRelations = relations(posts, ({ one, many }) => ({
	user: one(users, {
		fields: [posts.userId],
		references: [users.id]
	}),
	bookmarks: many(bookmarks),
	comments: many(comments)
}));

export const bookmarksRelations = relations(bookmarks, ({ one }) => ({
	user: one(users, {
		fields: [bookmarks.userId],
		references: [users.id]
	}),
	post: one(posts, {
		fields: [bookmarks.postId],
		references: [posts.id]
	})
}));

export const shelvesRelations = relations(shelves, ({ one, many }) => ({
	user: one(users, {
		fields: [shelves.userId],
		references: [users.id]
	}),
	items: many(shelfItems)
}));

export const shelfItemsRelations = relations(shelfItems, ({ one }) => ({
	shelf: one(shelves, {
		fields: [shelfItems.shelfId],
		references: [shelves.id]
	}),
	post: one(posts, {
		fields: [shelfItems.postId],
		references: [posts.id]
	})
}));

export const commentsRelations = relations(comments, ({ one, many }) => ({
	post: one(posts, {
		fields: [comments.postId],
		references: [posts.id]
	}),
	user: one(users, {
		fields: [comments.userId],
		references: [users.id]
	}),
	parent: one(comments, {
		fields: [comments.parentId],
		references: [comments.id],
		relationName: 'comment_replies'
	}),
	replies: many(comments, {
		relationName: 'comment_replies'
	})
}));

export const reactionsRelations = relations(reactions, ({ one }) => ({
	user: one(users, {
		fields: [reactions.userId],
		references: [users.id]
	})
}));

// Zod schemas for validation
export const insertPostSchema = createInsertSchema(posts);
export const selectPostSchema = createSelectSchema(posts);
export const insertBookmarkSchema = createInsertSchema(bookmarks);
export const selectBookmarkSchema = createSelectSchema(bookmarks);
export const insertShelfSchema = createInsertSchema(shelves);
export const selectShelfSchema = createSelectSchema(shelves);
export const insertCommentSchema = createInsertSchema(comments);
export const selectCommentSchema = createSelectSchema(comments);
